import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import FileUpload from '../components/FileUpload';
import Spinner from '../components/Spinner';
import { uploadFile } from '../services/api';

export default function Home() {
  const [file, setFile] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file) {
      setError('Please select a file first');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await uploadFile(formData);

      // âœ… Validate response before using
      if (!response || !Array.isArray(response.questions)) {
        throw new Error('Server did not return valid questions');
      }

      navigate('/results', {
        state: { questions: response.questions, filename: file.name },
      });
    } catch (err) {
      setError(err.message || 'Failed to process file');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto px-4 py-12">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">AI MCQ Generator</h1>
        <p className="text-gray-600">
          Upload a document (PDF, Word, Excel, or Image) and get 20 unique multiple-choice questions generated by AI.
        </p>
      </div>

      <div className="bg-white rounded-lg shadow-md p-6">
        {error && (
          <div className="mb-4 p-4 bg-red-50 text-red-700 rounded-md">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <FileUpload file={file} setFile={setFile} />
          
          <div className="mt-6">
            <button
              type="submit"
              disabled={isLoading || !file}
              className={`w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary ${(isLoading || !file) ? 'opacity-70 cursor-not-allowed' : ''}`}
            >
              {isLoading ? (
                <>
                  <Spinner className="mr-2" />
                  Processing...
                </>
              ) : (
                'Generate Questions'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
